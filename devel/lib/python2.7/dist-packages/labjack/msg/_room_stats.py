# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from labjack/room_stats.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class room_stats(genpy.Message):
  _md5sum = "59eedb0be73ea33bd051c9eaec764a62"
  _type = "labjack/room_stats"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 radiant_temp
float64 humidity
float64 ambient_temp
float64 air_velocity0
float64 air_velocity1
float64 light
float64 sound
"""
  __slots__ = ['radiant_temp','humidity','ambient_temp','air_velocity0','air_velocity1','light','sound']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       radiant_temp,humidity,ambient_temp,air_velocity0,air_velocity1,light,sound

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(room_stats, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.radiant_temp is None:
        self.radiant_temp = 0.
      if self.humidity is None:
        self.humidity = 0.
      if self.ambient_temp is None:
        self.ambient_temp = 0.
      if self.air_velocity0 is None:
        self.air_velocity0 = 0.
      if self.air_velocity1 is None:
        self.air_velocity1 = 0.
      if self.light is None:
        self.light = 0.
      if self.sound is None:
        self.sound = 0.
    else:
      self.radiant_temp = 0.
      self.humidity = 0.
      self.ambient_temp = 0.
      self.air_velocity0 = 0.
      self.air_velocity1 = 0.
      self.light = 0.
      self.sound = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7d().pack(_x.radiant_temp, _x.humidity, _x.ambient_temp, _x.air_velocity0, _x.air_velocity1, _x.light, _x.sound))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.radiant_temp, _x.humidity, _x.ambient_temp, _x.air_velocity0, _x.air_velocity1, _x.light, _x.sound,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7d().pack(_x.radiant_temp, _x.humidity, _x.ambient_temp, _x.air_velocity0, _x.air_velocity1, _x.light, _x.sound))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.radiant_temp, _x.humidity, _x.ambient_temp, _x.air_velocity0, _x.air_velocity1, _x.light, _x.sound,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
