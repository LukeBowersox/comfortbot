// Generated by gencpp from file labjack/room_stats.msg
// DO NOT EDIT!


#ifndef LABJACK_MESSAGE_ROOM_STATS_H
#define LABJACK_MESSAGE_ROOM_STATS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace labjack
{
template <class ContainerAllocator>
struct room_stats_
{
  typedef room_stats_<ContainerAllocator> Type;

  room_stats_()
    : radiant_temp(0.0)
    , humidity(0.0)
    , ambient_temp(0.0)
    , air_velocity0(0.0)
    , air_velocity1(0.0)
    , light(0.0)
    , sound(0.0)  {
    }
  room_stats_(const ContainerAllocator& _alloc)
    : radiant_temp(0.0)
    , humidity(0.0)
    , ambient_temp(0.0)
    , air_velocity0(0.0)
    , air_velocity1(0.0)
    , light(0.0)
    , sound(0.0)  {
  (void)_alloc;
    }



   typedef double _radiant_temp_type;
  _radiant_temp_type radiant_temp;

   typedef double _humidity_type;
  _humidity_type humidity;

   typedef double _ambient_temp_type;
  _ambient_temp_type ambient_temp;

   typedef double _air_velocity0_type;
  _air_velocity0_type air_velocity0;

   typedef double _air_velocity1_type;
  _air_velocity1_type air_velocity1;

   typedef double _light_type;
  _light_type light;

   typedef double _sound_type;
  _sound_type sound;





  typedef boost::shared_ptr< ::labjack::room_stats_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::labjack::room_stats_<ContainerAllocator> const> ConstPtr;

}; // struct room_stats_

typedef ::labjack::room_stats_<std::allocator<void> > room_stats;

typedef boost::shared_ptr< ::labjack::room_stats > room_statsPtr;
typedef boost::shared_ptr< ::labjack::room_stats const> room_statsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::labjack::room_stats_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::labjack::room_stats_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace labjack

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'labjack': ['/home/hcr/comfort_bot/src/labjack/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::labjack::room_stats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::labjack::room_stats_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::labjack::room_stats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::labjack::room_stats_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::labjack::room_stats_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::labjack::room_stats_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::labjack::room_stats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "59eedb0be73ea33bd051c9eaec764a62";
  }

  static const char* value(const ::labjack::room_stats_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x59eedb0be73ea33bULL;
  static const uint64_t static_value2 = 0xd051c9eaec764a62ULL;
};

template<class ContainerAllocator>
struct DataType< ::labjack::room_stats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "labjack/room_stats";
  }

  static const char* value(const ::labjack::room_stats_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::labjack::room_stats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 radiant_temp\n\
float64 humidity\n\
float64 ambient_temp\n\
float64 air_velocity0\n\
float64 air_velocity1\n\
float64 light\n\
float64 sound\n\
";
  }

  static const char* value(const ::labjack::room_stats_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::labjack::room_stats_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.radiant_temp);
      stream.next(m.humidity);
      stream.next(m.ambient_temp);
      stream.next(m.air_velocity0);
      stream.next(m.air_velocity1);
      stream.next(m.light);
      stream.next(m.sound);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct room_stats_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::labjack::room_stats_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::labjack::room_stats_<ContainerAllocator>& v)
  {
    s << indent << "radiant_temp: ";
    Printer<double>::stream(s, indent + "  ", v.radiant_temp);
    s << indent << "humidity: ";
    Printer<double>::stream(s, indent + "  ", v.humidity);
    s << indent << "ambient_temp: ";
    Printer<double>::stream(s, indent + "  ", v.ambient_temp);
    s << indent << "air_velocity0: ";
    Printer<double>::stream(s, indent + "  ", v.air_velocity0);
    s << indent << "air_velocity1: ";
    Printer<double>::stream(s, indent + "  ", v.air_velocity1);
    s << indent << "light: ";
    Printer<double>::stream(s, indent + "  ", v.light);
    s << indent << "sound: ";
    Printer<double>::stream(s, indent + "  ", v.sound);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LABJACK_MESSAGE_ROOM_STATS_H
